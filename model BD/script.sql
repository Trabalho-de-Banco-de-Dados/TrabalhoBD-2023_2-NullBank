-- MySQL Script generated by MySQL Workbench
-- Sat Nov 18 13:56:45 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema nullbank
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema nullbank
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `nullbank` DEFAULT CHARACTER SET utf8 ;
USE `nullbank` ;

-- -----------------------------------------------------
-- Table `nullbank`.`Agencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`Agencia` (
  `idAgencia` INT NOT NULL,
  `nome` VARCHAR(100) NOT NULL,
  `salario_montante_total` DECIMAL(10,2) NOT NULL,
  `cidade` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idAgencia`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`Funcionario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`Funcionario` (
  `idFuncionario` INT NOT NULL,
  `matricula` INT NOT NULL,
  `nome_completo` VARCHAR(100) NOT NULL,
  `senha` VARCHAR(255) NOT NULL,
  `endereco` VARCHAR(255) NOT NULL,
  `cidade` VARCHAR(100) NOT NULL,
  `cargo` ENUM('gerente', 'atendente', 'caixa') NOT NULL,
  `sexo` ENUM('masculino', 'feminino') NOT NULL,
  `data_nascimento_funcionario` DATE NOT NULL,
  `salario` DECIMAL(10,2) NOT NULL,
  `Agencia_idAgencia` INT NOT NULL,
  `num_dependentes` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`idFuncionario`),
  UNIQUE INDEX `idFuncionario_UNIQUE` (`idFuncionario` ASC) VISIBLE,
  UNIQUE INDEX `matricula_UNIQUE` (`matricula` ASC) VISIBLE,
  INDEX `fk_Funcionario_Agencia_idx` (`Agencia_idAgencia` ASC) VISIBLE,
  CONSTRAINT `fk_Funcionario_Agencia`
    FOREIGN KEY (`Agencia_idAgencia`)
    REFERENCES `nullbank`.`Agencia` (`idAgencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`Dependente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`Dependente` (
  `idDependente` INT NOT NULL,
  `nome_completo` VARCHAR(100) NULL,
  `data_nascimento_dependente` DATE NULL,
  `parentesco` ENUM('filho', 'conjuge', 'genitor') NULL,
  `data_nascimento` DATE NULL,
  `Funcionario_idFuncionario` INT NOT NULL,
  PRIMARY KEY (`idDependente`, `Funcionario_idFuncionario`),
  INDEX `fk_Dependente_Funcionario1_idx` (`Funcionario_idFuncionario` ASC) VISIBLE,
  CONSTRAINT `fk_Dependente_Funcionario1`
    FOREIGN KEY (`Funcionario_idFuncionario`)
    REFERENCES `nullbank`.`Funcionario` (`idFuncionario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`Endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`Endereco` (
  `idEndereco` INT NOT NULL,
  `tipo_logradouro` VARCHAR(20) NULL,
  `nome_logradouro` VARCHAR(100) NULL,
  `numero` INT NULL,
  `bairro` VARCHAR(50) NULL,
  `cep` VARCHAR(10) NULL,
  `cidade` VARCHAR(100) NULL,
  `estado` VARCHAR(2) NULL,
  PRIMARY KEY (`idEndereco`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`Cliente` (
  `cpf` VARCHAR(11) NOT NULL,
  `nome_completo` VARCHAR(100) NULL,
  `rg` VARCHAR(15) NOT NULL,
  `orgao_emissor` VARCHAR(50) NOT NULL,
  `uf_rg` VARCHAR(2) NOT NULL,
  `data_nascimento_cliente` DATE NOT NULL,
  `Endereco_idEndereco` INT NOT NULL,
  PRIMARY KEY (`cpf`),
  INDEX `fk_Cliente_Endereco1_idx` (`Endereco_idEndereco` ASC) VISIBLE,
  CONSTRAINT `fk_Cliente_Endereco1`
    FOREIGN KEY (`Endereco_idEndereco`)
    REFERENCES `nullbank`.`Endereco` (`idEndereco`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`ContaBancaria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`ContaBancaria` (
  `numero_conta` INT NOT NULL,
  `saldo` DECIMAL(10,2) NOT NULL DEFAULT 0,
  `senha` VARCHAR(255) NOT NULL,
  `tipo_conta` ENUM('conta_corrente', 'conta_poupanca', 'conta_especial') NOT NULL,
  `Cliente_cpf` VARCHAR(11) NOT NULL,
  `Gerente_idFuncionario` INT NOT NULL,
  `Agencia_idAgencia` INT NOT NULL,
  PRIMARY KEY (`numero_conta`),
  INDEX `fk_ContaBancaria_Cliente1_idx` (`Cliente_cpf` ASC) VISIBLE,
  INDEX `fk_ContaBancaria_Funcionario1_idx` (`Gerente_idFuncionario` ASC) VISIBLE,
  INDEX `fk_ContaBancaria_Agencia1_idx` (`Agencia_idAgencia` ASC) VISIBLE,
  CONSTRAINT `fk_ContaBancaria_Cliente1`
    FOREIGN KEY (`Cliente_cpf`)
    REFERENCES `nullbank`.`Cliente` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ContaBancaria_Funcionario1`
    FOREIGN KEY (`Gerente_idFuncionario`)
    REFERENCES `nullbank`.`Funcionario` (`idFuncionario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ContaBancaria_Agencia1`
    FOREIGN KEY (`Agencia_idAgencia`)
    REFERENCES `nullbank`.`Agencia` (`idAgencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`Telefone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`Telefone` (
  `idTelefone` INT NOT NULL,
  `telefone` CHAR(11) NOT NULL,
  `tipo` VARCHAR(30) NOT NULL,
  `Cliente_cpf` VARCHAR(11) NOT NULL,
  PRIMARY KEY (`idTelefone`),
  INDEX `fk_Telefones_Cliente1_idx` (`Cliente_cpf` ASC) VISIBLE,
  CONSTRAINT `fk_Telefones_Cliente1`
    FOREIGN KEY (`Cliente_cpf`)
    REFERENCES `nullbank`.`Cliente` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`Transacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`Transacao` (
  `idTransacao` INT NOT NULL,
  `tipo_transacao` ENUM('saque', 'deposito', 'pagamento', 'estorno', 'transferencia') NOT NULL,
  `data_hora` DATETIME NOT NULL,
  `valor` DECIMAL(10,2) NOT NULL,
  `Entrada` INT NOT NULL,
  `Saida` INT NULL,
  PRIMARY KEY (`idTransacao`),
  INDEX `fk_Transacao_ContaBancaria1_idx` (`Entrada` ASC) VISIBLE,
  INDEX `fk_Transacao_ContaBancaria2_idx` (`Saida` ASC) VISIBLE,
  CONSTRAINT `fk_Transacao_ContaBancaria1`
    FOREIGN KEY (`Entrada`)
    REFERENCES `nullbank`.`ContaBancaria` (`numero_conta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transacao_ContaBancaria2`
    FOREIGN KEY (`Saida`)
    REFERENCES `nullbank`.`ContaBancaria` (`numero_conta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`Email`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`Email` (
  `idEmail` INT NOT NULL,
  `email` VARCHAR(60) NOT NULL,
  `tipo` VARCHAR(30) NOT NULL,
  `Cliente_cpf` VARCHAR(11) NOT NULL,
  PRIMARY KEY (`idEmail`),
  INDEX `fk_Email_Cliente1_idx` (`Cliente_cpf` ASC) VISIBLE,
  CONSTRAINT `fk_Email_Cliente1`
    FOREIGN KEY (`Cliente_cpf`)
    REFERENCES `nullbank`.`Cliente` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`contaCorrente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`contaCorrente` (
  `aniversario_contrato` INT NOT NULL,
  `ContaBancaria_numero_conta` INT NOT NULL,
  INDEX `fk_contaCorrente_ContaBancaria1_idx` (`ContaBancaria_numero_conta` ASC) VISIBLE,
  CONSTRAINT `fk_contaCorrente_ContaBancaria1`
    FOREIGN KEY (`ContaBancaria_numero_conta`)
    REFERENCES `nullbank`.`ContaBancaria` (`numero_conta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`ContaPoupanca`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`ContaPoupanca` (
  `taxa_juros` INT NOT NULL,
  `ContaBancaria_numero_conta` INT NOT NULL,
  INDEX `fk_ContaPoupanca_ContaBancaria1_idx` (`ContaBancaria_numero_conta` ASC) VISIBLE,
  CONSTRAINT `fk_ContaPoupanca_ContaBancaria1`
    FOREIGN KEY (`ContaBancaria_numero_conta`)
    REFERENCES `nullbank`.`ContaBancaria` (`numero_conta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nullbank`.`ContaEspecial`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nullbank`.`ContaEspecial` (
  `ContaBancaria_numero_conta` INT NOT NULL,
  `limite_credito` INT NULL,
  INDEX `fk_table3_ContaBancaria1_idx` (`ContaBancaria_numero_conta` ASC) VISIBLE,
  CONSTRAINT `fk_table3_ContaBancaria1`
    FOREIGN KEY (`ContaBancaria_numero_conta`)
    REFERENCES `nullbank`.`ContaBancaria` (`numero_conta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `nullbank`;

DELIMITER $$
USE `nullbank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `nullbank`.`SalarioBaixoInsert` BEFORE INSERT ON `Funcionario` FOR EACH ROW
BEGIN
	IF NEW.salario < 2286.00 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'O salário não pode ser menor que R$2.286,00';
    END IF;
END$$

USE `nullbank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `nullbank`.`SomaSalarioTotalInsert` AFTER INSERT ON `Funcionario` FOR EACH ROW
BEGIN
	DECLARE total_salario DECIMAL(10, 2);

    -- Calcular o total de salários para a agência
    SELECT SUM(salario) INTO total_salario
    FROM Funcionario
    WHERE Agencia_idAgencia = NEW.Agencia_idAgencia;

    -- Atualizar o salário_montante_total na tabela Agencia
    UPDATE Agencia
    SET salario_montante_total = total_salario
    WHERE idAgencia = NEW.Agencia_idAgencia;
END$$

USE `nullbank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `nullbank`.`SalarioBaixoUpdate` BEFORE UPDATE ON `Funcionario` FOR EACH ROW
BEGIN
	IF NEW.salario < 2286.00 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'O salário não pode ser menor que R$2.286,00';
    END IF;
END$$

USE `nullbank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `nullbank`.`SomaSalarioTotalUpdate` AFTER UPDATE ON `Funcionario` FOR EACH ROW
BEGIN
	DECLARE total_salario DECIMAL(10, 2);

    -- Calcular o total de salários para a agência
    SELECT SUM(salario) INTO total_salario
    FROM Funcionario
    WHERE Agencia_idAgencia = NEW.Agencia_idAgencia;

    -- Atualizar o salário_montante_total na tabela Agencia
    UPDATE Agencia
    SET salario_montante_total = total_salario
    WHERE idAgencia = NEW.Agencia_idAgencia;
END$$

USE `nullbank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `nullbank`.`SomaSalarioTotalDelete` AFTER DELETE ON `Funcionario` FOR EACH ROW
BEGIN
	DECLARE total_salario DECIMAL(10, 2);

    -- Calcular o total de salários para a agência
    SELECT SUM(salario) INTO total_salario
    FROM Funcionario
    WHERE Agencia_idAgencia = OLD.Agencia_idAgencia;

    -- Atualizar o salário_montante_total na tabela Agencia
    UPDATE Agencia
    SET sal_montante_total = total_salario
    WHERE idAgencia = OLD.Agencia_idAgencia;END$$

USE `nullbank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `nullbank`.`NumeroDependentesInsert` BEFORE INSERT ON `Dependente` FOR EACH ROW
BEGIN
	DECLARE numdependentes INT;
    
    -- Obter o número atual de dependentes
    SELECT num_dependentes INTO numdependentes
    FROM Funcionario
    WHERE idFuncionario = NEW.Funcionario_idFuncionario;
    
    -- Verificar se o número máximo de dependentes foi atingido
    IF numdependentes >= 5 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Número máximo de dependentes atingido (5)';
    ELSE
        -- Incrementar o número de dependentes
        UPDATE Funcionario
        SET num_dependentes = numdependentes + 1
        WHERE idFuncionario = NEW.Funcionario_idFuncionario;
    END IF;
END$$

USE `nullbank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `nullbank`.`NumeroDependentesDelete` BEFORE DELETE ON `Dependente` FOR EACH ROW
BEGIN
	DECLARE numdependentes INT;
	SELECT num_dependentes INTO numdependentes
		FROM Funcionario
		WHERE idFuncionario = OLD.Funcionario_idFuncionario;
	UPDATE Funcionario
        SET num_dependentes = numdependentes - 1
        WHERE idFuncionario = OLD.Funcionario_idFuncionario;
END$$

USE `nullbank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `nullbank`.`Transacao_AFTER_INSERT` AFTER INSERT ON `Transacao` FOR EACH ROW
BEGIN
	DECLARE novo_saldo DECIMAL(10, 2);
    
    -- Verificar o tipo de transação e atualizar o saldo da conta
    IF NEW.tipo_transacao = 'deposito' OR NEW.tipo_transacao = 'estorno' OR NEW.tipo_transacao = 'estorno' THEN
        SET novo_saldo = (SELECT saldo + NEW.valor FROM ContaBancaria WHERE numero_conta = NEW.Entrada);
        UPDATE ContaBancaria SET saldo = novo_saldo WHERE numero_conta = NEW.Entrada;
    ELSE
        SET novo_saldo = (SELECT saldo - NEW.valor FROM ContaBancaria WHERE numero_conta = NEW.Entrada);
        
        -- Verificar se o novo saldo é negativo
        IF novo_saldo < 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Saldo insuficiente para realizar a transação';
        END IF;

        UPDATE ContaBancaria SET saldo = novo_saldo WHERE numero_conta = NEW.Entrada;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
